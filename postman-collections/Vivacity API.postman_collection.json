{
	"info": {
		"_postman_id": "f0d74460-89be-449f-a242-6a6038c8d7f9",
		"name": "VivaCity API",
		"description": "## Gain access to your sensor estate's data through a single service\n\nVivaCity's Traffic Monitoring API provides a set of endpoints that allow users to extract, manipulate and analyse the feature data running on VivaCity's advanced AI computer vision sensors.  \nDatasets include:\n\n- **Counts data** covering a broad range of road users\n- Vehicle **speed data**\n- Junction **turning movements**\n- Road user **journey times** information collected using ANPR\n- Data around road space behaviours namely **dwell times** and **occupancy** data\n    \n    ---\n    \n\n## Authentication 🔐\n\n### Current\n\ntheme: warning\n\n> **Be aware!**  \nOnce the use of API keys is made widely available no new login credentials for API access tokens will be issued.  \nUser must use access tokens to authenticate your API requests. To authenticate your API requests, you must obtain login credentials. Please contact your project manager or [support@vivacitylabs.com](https://mailto://support@vivacitylabs.com) to gain access. \n  \n\n### The Future\n\ntheme: info\n\n> **Want to get Early Access?**  \nPlease reach out and provide your [details](https://docs.google.com/forms/d/e/1FAIpQLScoARE92g6a1dWkJ7g8II1yT1sI8Z1fGpP7m70ZFVmOnU_8tw/viewform?usp=sf_link)!  \nThe VivaCity Traffic Monitoring API will soon make use of [API keys](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2759557127/Supported+API+authentication+methods) to authenticate requests. You will be able to add, view and manage your API keys using the newly released [User Settings page](https://admin.vivacitylabs.com/settings/api-access). \n  \n\n## Guides and Documentation 📃\n\n- New to APIs?\n- Wanting to plug our data into your own dashboard?\n- Want to know some tips and tricks?\n    \n\nCheck out our quickstart [guide](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2600566802/Getting+started+with+the+API) and other help [docs](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2586771489/API).\n\nStill stuck or want to know more please reach out to [support@vivacitylabs.com](https://mailto://support@vivacitylabs.com).\n\n### Postman Collection\n\nIf you are planning to or would like to use Postman we have you covered with our [Postman collection](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2600173735/Using+Postman). Import this collection and immediately get cracking.\n\n## Versioning ⏫\n\nWhen breaking changes are made to the API, we release a new version. The current version is **1.0.0**. To make our user experience more seamless we will support multiple versions of select individual endpoints.\n\n## Rate Limits and Fair Usage 🛑\n\ntheme: info\n\n> **Getting stung by our rate limits?**  \nPlease reach out to [support@vivacitylabs.com](https://mailto://support@vivacitylabs.com).  \nAll endpoints are subjected to the same global rate limits. Simultaneous request limits of `300/minute` and `7200/hour` are applied to each source IP address.  \nWhen either limit is exceeded, a `429 Too Many Requests` response is returned along with the following JSON response body: \n  \n\n``` json\n{\n  \"message\": \"API rate limit exceeded\"\n}\n\n ```\n\nThe following Request Headers are also set:\n\n```\nX-RateLimit-Limit-minute: 300 // allowed requests per minute\nX-RateLimit-Remaining-minute: 296 // remaining requests this minute\nX-RateLimit-Limit-hour: 7200 // allowed requests per hour\nX-RateLimit-Remaining-hour: 7184 // remaining requests this hour\n\n ```\n\n## Error Tracing 🐞\n\nWhen an error occurs, the API returns standard HTTP status codes. In addition, the response body contains a string object with a message that describes the error. For all responses, apart from 429 Too Many Requests, we return a unique request id with the key `Request-ID` in the response headers to help us trace the error. Please include the `Request-ID` in any support requests.\n\n## Interpreting our Metadata 🗃️\n\n### Metadata Hierarchy\n\n- Hardware\n    - Viewpoint\n        - Countline\n        - Zone\n\n### Metadata Types\n\n#### Hardware\n\n- Is the physical sensor.\n- Hardwares are the parent entity from which all of our metadata connects to\n    \n\n#### Viewpoint\n\n- Relates to the camera found in our sensors.\n- Most sensors have a single lens active and thus only one viewpoint associated.\n- Common exceptions to this our sensors running ANPR features as often one lens will be configured to collect ANPR data whilst the other is configured for other data feeds.\n    \n\n#### Countline\n\n- Is a virtual line drawn across the road space.\n- Is used to measure road user behaviour.\n- Certain feature data points relate to the moment an object crossed a countline.\n    \n\n#### Zone\n\n- Is a virtual area drawn to cover a segment of the road space.\n- Much like countlines is used to measure road user behaviour.\n- Select feature data points relate to times at which an object is within, enters or leaves a zone.\n    \n\nContact Support:  \nName: VivaCity Customer Support  \nEmail: [support@vivacitylabs.com](https://mailto:support@vivacitylabs.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19206815"
	},
	"item": [
		{
			"name": "countline",
			"item": [
				{
					"name": "crossings",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"countline",
								"counts"
							],
							"query": [
								{
									"key": "countline_ids",
									"value": "1",
									"description": "Specify which countlines to return results for"
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "fill_zeros",
									"value": "true",
									"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
								},
								{
									"key": "convert_pcus",
									"value": "true",
									"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
								}
							]
						},
						"description": "Countline crossings, also known as counts, capture the volume of road users across a specific time period. Crossings are deduplicated such that any given road user can only be recorded crossing a countline once. This is important to note as pedestrians often go back and forth over countlines as their motion is far less constrained than other road users.  \n\nIn the cases where a road user crosses a countline multiple times only the first crossing, and the information associated with it, is registered. This is important to note when analysing timestamps of crossings or their associated direction.  \n\nThe endpoint returns an array of time classified crossing data. Each time bucket contains the number of crossings witnessed disaggregated by road user classs for each countline direction. Data is provided for both countline directions, if requested and the countline has been configured to provide data for both directions.  \n<!-- theme: info -->  \n> **Note**<br>Empty results, both for classes and time periods, are excluded unless the parameter `fill_zeros` is set to `true`.\nData can be presented as either raw counts or as Passenger Car Units (PCUs). To do this the parameter `convert_pcus` must be set to `true`. Information on how the PCU factors can be seen below.  \n\n\n | **VivaCity Road User Class** | **PCU Value** |  \n |--|--|  \n | `pedestrian`, `mobility_scooter`, `pushchair`, `wheelchair`,<br> `jogger`, `push_scooter`, `horse`, `dog` | 0 |  \n | `cyclist`, `cargo_bicycle`, `escooter`, `rental_bicycle` | 0.2 |  \n | `motorbike` | 0.4 |  \n | `car`, `taxi`, `van`, `emergency_car`, `emergency_van`,<br> `electric_hackney_cab`, `other_taxis`, `small_van`, `luton_van`, `towed_trailer`| 1.0 |  \n | `bus`, `private_bus`, `london_bus`, `minibus` | 2.0 |  \n | `rigid`, `truck`, `fire_engine`, `tractor`, `agricultural_vehicle` | 2.3 |  \n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"16666\": [\n    {\n      \"from\": \"2024-02-01T09:00:00.000Z\",\n      \"to\": \"2024-02-01T10:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": 5,\n        \"car\": 526,\n        \"cyclist\": 17,\n        \"emergency_car\": 1,\n        \"emergency_van\": 1,\n        \"minibus\": 3,\n        \"motorbike\": 4,\n        \"pedestrian\": 9,\n        \"rigid\": 5,\n        \"taxi\": 8,\n        \"truck\": 2,\n        \"van\": 86\n      },\n      \"clockwise\": {\n        \"bus\": 3,\n        \"car\": 197,\n        \"cyclist\": 7,\n        \"emergency_car\": 0,\n        \"emergency_van\": 0,\n        \"minibus\": 0,\n        \"motorbike\": 1,\n        \"pedestrian\": 18,\n        \"rigid\": 3,\n        \"taxi\": 5,\n        \"truck\": 2,\n        \"van\": 52\n      }\n    },\n    {\n      \"from\": \"2024-02-01T10:00:00.000Z\",\n      \"to\": \"2024-02-01T11:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": 7,\n        \"car\": 277,\n        \"cyclist\": 14,\n        \"emergency_car\": 1,\n        \"motorbike\": 2,\n        \"pedestrian\": 1,\n        \"rigid\": 6,\n        \"taxi\": 8,\n        \"truck\": 4,\n        \"van\": 74\n      },\n      \"clockwise\": {\n        \"bus\": 1,\n        \"car\": 171,\n        \"cyclist\": 5,\n        \"emergency_car\": 2,\n        \"motorbike\": 0,\n        \"pedestrian\": 5,\n        \"rigid\": 7,\n        \"taxi\": 1,\n        \"truck\": 3,\n        \"van\": 57\n      }\n    },\n    {\n      \"from\": \"2024-02-01T11:00:00.000Z\",\n      \"to\": \"2024-02-01T12:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": 4,\n        \"car\": 235,\n        \"cyclist\": 10,\n        \"emergency_car\": 3,\n        \"emergency_van\": 1,\n        \"minibus\": 1,\n        \"motorbike\": 1,\n        \"pedestrian\": 6,\n        \"rigid\": 8,\n        \"taxi\": 4,\n        \"truck\": 2,\n        \"van\": 69\n      },\n      \"clockwise\": {\n        \"bus\": 1,\n        \"car\": 192,\n        \"cyclist\": 8,\n        \"emergency_car\": 1,\n        \"emergency_van\": 0,\n        \"minibus\": 0,\n        \"motorbike\": 1,\n        \"pedestrian\": 7,\n        \"rigid\": 6,\n        \"taxi\": 4,\n        \"truck\": 1,\n        \"van\": 61\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/counts?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_zeros=true&convert_pcus=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"counts"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_zeros",
											"value": "true",
											"description": "If set to true, the response will include zeros for the all requested classes for each time bucket within the requested time range even if no vehicles of that class were detected.\nThis defaults to false if not present and can be added to the query as `&fill_zeros=true` or simply `&fill_zeros`."
										},
										{
											"key": "convert_pcus",
											"value": "true",
											"description": "If true, the data will be presented in Passenger Car Units not individual class volumes.\nInformation detailing the mapping from class volumes to PCU values can be found <a href=\"WEB URL\">here</a>. "
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "speeds",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"countline",
								"speed"
							],
							"query": [
								{
									"key": "countline_ids",
									"value": "1",
									"description": "Specify which countlines to return results for"
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "speed_bucket_number",
									"value": "5",
									"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
								},
								{
									"key": "max_speed",
									"value": "12.34",
									"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
								},
								{
									"key": "min_speed",
									"value": "15",
									"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
								},
								{
									"key": "fill_nulls",
									"value": "true",
									"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
								},
								{
									"key": "units",
									"value": "kmh",
									"description": "String denoting the units of the response data."
								}
							]
						},
						"description": "The speed of road users is captured at the moment an object crosses a countline. Speed data can be returned for all road user classes including pedestrians and cyclists. Note that the speed of a road user is tracked across many frames not solely the frame in which it crosses a countline. However, the value recorded is that of the moment the object crosses a countline.  \n\nThe endpoint returns an array of time bucketed speed data. Each time bucket contains the following information for each individual road user class as well as aggregated across all road user classes:  \n\n - The number of crossings per speed bucket\n   - Speed buckets are specified within the request\n - The mean speed value\n - The 85th percentile value\n\nBy default speed data is returned in **metres per second**.\n\nData is provided for both countline directions, if requested and the countline has been configured to provide data for both directions.\n<!-- theme: info -->  \n> **Note**<br>Empty results, both for classes and time periods, are excluded unless the parameter `fill_zeros` is set to `true`.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"16666\": [\n    {\n      \"from\": \"2024-02-01T09:00:00.000Z\",\n      \"to\": \"2024-02-01T10:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"0.00\": 2,\n            \"10.00\": 3\n          },\n          \"mean\": 9.19,\n          \"p85\": 10.95\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"0.00\": 57,\n            \"10.00\": 249,\n            \"20.00\": 192,\n            \"30.00\": 24,\n            \"40.00\": 3,\n            \"60.00\": 1\n          },\n          \"mean\": 18.74,\n          \"p85\": 25.78\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"0.00\": 59,\n            \"10.00\": 252,\n            \"20.00\": 192,\n            \"30.00\": 24,\n            \"40.00\": 3,\n            \"60.00\": 1\n          },\n          \"mean\": 18.65,\n          \"p85\": 25.7\n        }\n      },\n      \"clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"30.00\": 3\n          },\n          \"mean\": 35.52,\n          \"p85\": 36.66\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"10.00\": 3,\n            \"20.00\": 18,\n            \"30.00\": 114,\n            \"40.00\": 53,\n            \"50.00\": 7,\n            \"60.00\": 2\n          },\n          \"mean\": 37.8,\n          \"p85\": 44.14\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"10.00\": 3,\n            \"20.00\": 18,\n            \"30.00\": 117,\n            \"40.00\": 53,\n            \"50.00\": 7,\n            \"60.00\": 2\n          },\n          \"mean\": 37.77,\n          \"p85\": 43.89\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T10:00:00.000Z\",\n      \"to\": \"2024-02-01T11:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"0.00\": 2,\n            \"10.00\": 5\n          },\n          \"mean\": 12.44,\n          \"p85\": 14.64\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"0.00\": 23,\n            \"10.00\": 67,\n            \"20.00\": 130,\n            \"30.00\": 53,\n            \"40.00\": 4\n          },\n          \"mean\": 23.15,\n          \"p85\": 31.67\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"0.00\": 25,\n            \"10.00\": 72,\n            \"20.00\": 130,\n            \"30.00\": 53,\n            \"40.00\": 4\n          },\n          \"mean\": 22.88,\n          \"p85\": 31.4\n        }\n      },\n      \"clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"30.00\": 1\n          },\n          \"mean\": 39.38,\n          \"p85\": 39.38\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"10.00\": 2,\n            \"20.00\": 4,\n            \"30.00\": 81,\n            \"40.00\": 66,\n            \"50.00\": 12,\n            \"60.00\": 3,\n            \"70.00\": 3\n          },\n          \"mean\": 40.92,\n          \"p85\": 46.94\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"10.00\": 2,\n            \"20.00\": 4,\n            \"30.00\": 82,\n            \"40.00\": 66,\n            \"50.00\": 12,\n            \"60.00\": 3,\n            \"70.00\": 3\n          },\n          \"mean\": 40.92,\n          \"p85\": 46.92\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T11:00:00.000Z\",\n      \"to\": \"2024-02-01T12:00:00.000Z\",\n      \"anti_clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"0.00\": 1,\n            \"10.00\": 3\n          },\n          \"mean\": 11.61,\n          \"p85\": 13.14\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"0.00\": 21,\n            \"10.00\": 65,\n            \"20.00\": 103,\n            \"30.00\": 38,\n            \"40.00\": 5,\n            \"50.00\": 3\n          },\n          \"mean\": 22.76,\n          \"p85\": 31.5\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"0.00\": 22,\n            \"10.00\": 68,\n            \"20.00\": 103,\n            \"30.00\": 38,\n            \"40.00\": 5,\n            \"50.00\": 3\n          },\n          \"mean\": 22.58,\n          \"p85\": 31.47\n        }\n      },\n      \"clockwise\": {\n        \"bus\": {\n          \"speed_bins\": {\n            \"20.00\": 1\n          },\n          \"mean\": 29.63,\n          \"p85\": 29.63\n        },\n        \"car\": {\n          \"speed_bins\": {\n            \"10.00\": 1,\n            \"20.00\": 17,\n            \"30.00\": 100,\n            \"40.00\": 61,\n            \"50.00\": 12,\n            \"60.00\": 1\n          },\n          \"mean\": 38.96,\n          \"p85\": 45.77\n        },\n        \"total\": {\n          \"speed_bins\": {\n            \"10.00\": 1,\n            \"20.00\": 18,\n            \"30.00\": 100,\n            \"40.00\": 61,\n            \"50.00\": 12,\n            \"60.00\": 1\n          },\n          \"mean\": 38.91,\n          \"p85\": 45.72\n        }\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/speed?countline_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&speed_bucket_number=5&max_speed=12.34&min_speed=15&fill_nulls=true&units=kmh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"speed"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "speed_bucket_number",
											"value": "5",
											"description": "(Required) The number of equally-sized speed buckets for which results will be returned for each class within each countline direction. The size of these speed buckets will be (`max_speed` minus `min_speed`) divided by `speed_bucket_number`.\nAn additional speed bucket with unlimited upper bound will be returned with a count of crossings at speeds equal to or greater than `max_speed` when this count is non-zero, or in all cases if `fill_zeros` is true."
										},
										{
											"key": "max_speed",
											"value": "12.34",
											"description": "(Required) The speed below which countline speeds will be returned.\nSee `speed_bucket_number`."
										},
										{
											"key": "min_speed",
											"value": "15",
											"description": "The lower bound for which countline speeds will be returned for each class. Defaults to 0.00.\nSee `speed_bucket_number`."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										},
										{
											"key": "units",
											"value": "kmh",
											"description": "String denoting the units of the response data."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "journey times",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"countline",
								"journey_times"
							],
							"query": [
								{
									"key": "origin_countline_id",
									"value": "1",
									"description": "(Required) Specify the origin countline."
								},
								{
									"key": "destination_countline_id",
									"value": "1",
									"description": "(Required) Specify the destination countline."
								},
								{
									"key": "origin_countline_direction",
									"value": "both",
									"description": "(Required) Specify the origin countline direction as either both, in or out."
								},
								{
									"key": "destination_countline_direction",
									"value": "in",
									"description": "(Required) Specify the destination countline direction as either both, in or out."
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "disaggregate_classes",
									"value": "true",
									"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
								},
								{
									"key": "fill_nulls",
									"value": "true",
									"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
								}
							]
						},
						"description": "Journey time information can be provided between pairs of countlines, provided they are associated with ANPR capable viewpoints. Journey times are calculated as the time taken between an road user crossing the `origin_countline_id` and `destination_countline_id`. Note, journey times are only recorded for road user classes with license plates.  \n\nFor a journey to be registered it's number plate **must** be captured crossing both countlines and deciphered correctly. \n<!-- theme: info -->  \n> **Note**<br>Only journey times **under 2 hours in length** will be returned. \nThe endpoint returns an array of time bucketed journey time data. Each time bucket contains the following information aggregated across all road user classes:\n\n - Number of journeys\n - Mean journey time\n - Median journey time\n - 25th percentile journey time\n - 75th percentile journey time\n\nJourney times are returned in **seconds**.  \n\nBy default data is returned for all trips made in all directions. Data can be returned for trips in specific directions by specifying this in the request.  \n\nThe `Unknown` class can be selected and encompasses any object that the sensor was unable to successfully classify.  \n<!-- theme: info -->  \n> **Note**<br>Data can be disaggregated by road user if the `disaggregate_classes` is set to true. Note that the Classified Journey Time add-on **must** have also been purchased for this data to be available.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"42050\": {\n    \"42045\": [\n      {\n        \"from\": \"2024-02-01T07:00:00Z\",\n        \"to\": \"2024-02-01T08:00:00Z\",\n        \"journey_times\": {\n          \"car\": {\n            \"number_of_journeys\": 1,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          },\n          \"total\": {\n            \"number_of_journeys\": 1,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          }\n        }\n      },\n      {\n        \"from\": \"2024-02-01T08:00:00Z\",\n        \"to\": \"2024-02-01T09:00:00Z\",\n        \"journey_times\": {\n          \"car\": {\n            \"number_of_journeys\": 20,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          },\n          \"total\": {\n            \"number_of_journeys\": 20,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          }\n        }\n      },\n      {\n        \"from\": \"2024-02-01T09:00:00Z\",\n        \"to\": \"2024-02-01T10:00:00Z\",\n        \"journey_times\": {\n          \"car\": {\n            \"number_of_journeys\": 81,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          },\n          \"total\": {\n            \"number_of_journeys\": 81,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          }\n        }\n      },\n      {\n        \"from\": \"2024-02-01T10:00:00Z\",\n        \"to\": \"2024-02-01T11:00:00Z\",\n        \"journey_times\": {\n          \"car\": {\n            \"number_of_journeys\": 39,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          },\n          \"total\": {\n            \"number_of_journeys\": 39,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          }\n        }\n      },\n      {\n        \"from\": \"2024-02-01T11:00:00Z\",\n        \"to\": \"2024-02-01T12:00:00Z\",\n        \"journey_times\": {\n          \"car\": {\n            \"number_of_journeys\": 13,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          },\n          \"total\": {\n            \"number_of_journeys\": 13,\n            \"25_percentile_journey_time\": 556,\n            \"mean_journey_time\": 750.07,\n            \"median_journey_time\": 643,\n            \"75_percentile_journey_time\": 953\n          }\n        }\n      }\n    ]\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/journey_times?origin_countline_id=1&destination_countline_id=1&origin_countline_direction=both&destination_countline_direction=in&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&classes=car&disaggregate_classes=true&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"journey_times"
									],
									"query": [
										{
											"key": "origin_countline_id",
											"value": "1",
											"description": "(Required) Specify the origin countline."
										},
										{
											"key": "destination_countline_id",
											"value": "1",
											"description": "(Required) Specify the destination countline."
										},
										{
											"key": "origin_countline_direction",
											"value": "both",
											"description": "(Required) Specify the origin countline direction as either both, in or out."
										},
										{
											"key": "destination_countline_direction",
											"value": "in",
											"description": "(Required) Specify the destination countline direction as either both, in or out."
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "disaggregate_classes",
											"value": "true",
											"description": "If true, the response for each countline will include data for each class requested in the `classes` parameter, if defined. \nIf undefined feature data will be returned for all classes."
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "metadata",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"countline",
								"metadata"
							],
							"query": [
								{
									"key": "countline_ids",
									"value": "1",
									"description": "Specify which countlines to return results for"
								}
							]
						},
						"description": "Get information for the specified countlines. If `countline_ids` are not specified it will return all countlines that a user has permission to view."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"10001\": {\n    \"name\": \"King St LHS Footpath\",\n    \"description\": \"King St left hand side footpath looking East\",\n    \"direction\": \"CLOCKWISE_AND_ANTICLOCKWISE\",\n    \"geometry\": {\n      \"image\": [\n        [\n          6553,\n          2109\n        ],\n        [\n          16366,\n          3064\n        ],\n        [\n          5231,\n          3853\n        ],\n        [\n          16229,\n          5946\n        ],\n        [\n          3789,\n          5491\n        ],\n        [\n          16204,\n          9542\n        ],\n        [\n          1579,\n          8009\n        ],\n        [\n          16204,\n          12545\n        ],\n        [\n          94,\n          9921\n        ],\n        [\n          16212,\n          15336\n        ],\n        [\n          137,\n          12803\n        ],\n        [\n          8601,\n          16307\n        ]\n      ],\n      \"geo_json\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            -2.246271,\n            53.477825\n          ],\n          [\n            -2.246258,\n            53.477875\n          ]\n        ]\n      }\n    },\n    \"is_dwell_times_filtering_countline\": false,\n    \"alert_rules\": {}\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline/metadata?countline_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline",
										"metadata"
									],
									"query": [
										{
											"key": "countline_ids",
											"value": "1",
											"description": "Specify which countlines to return results for"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "All countline based feature data."
		},
		{
			"name": "zone",
			"item": [
				{
					"name": "speeds",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"zone",
								"speeds"
							],
							"query": [
								{
									"key": "zone_ids",
									"value": "1",
									"description": "(Required) Specify which zones to return speeds for."
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "fill_nulls",
									"value": "true",
									"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
								}
							]
						},
						"description": "The speed of a road user is tracked across many frames. This includes when a road user is occupying a zone. Zonal speeds captures speed data relating to a road user once it is within a zone. \n\nThe endpoint returns an array of time bucketed zonal speed data. Each time bucket contains the following information for each individual road user class:\n\n - The mean speed value\n - The 50th, 85th and 95th percentile speed values\n - The speed variance\n - The mean number of road users occupying the zone during the time bucket\n\nBy default speed data is returned in **metres per second**.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"5254\": [\n    {\n      \"from\": \"2024-02-01T01:00:00.000Z\",\n      \"to\": \"2024-02-01T02:00:00.000Z\",\n      \"zone_speeds\": {\n        \"car\": {\n          \"mean_speed\": 3.86,\n          \"50_percentile_speed\": 3.61,\n          \"85_percentile_speed\": 4.92,\n          \"95_percentile_speed\": 7.08,\n          \"speed_variance\": 2.52,\n          \"mean_occupancy\": 1.01\n        },\n        \"pedestrian\": {\n          \"mean_speed\": 0.1,\n          \"50_percentile_speed\": 0.02,\n          \"85_percentile_speed\": 0.08,\n          \"95_percentile_speed\": 1.07,\n          \"speed_variance\": 0.1,\n          \"mean_occupancy\": 1.01\n        },\n        \"van\": {\n          \"mean_speed\": 3.51,\n          \"50_percentile_speed\": 3.51,\n          \"85_percentile_speed\": 3.51,\n          \"95_percentile_speed\": 3.51,\n          \"speed_variance\": null,\n          \"mean_occupancy\": 1\n        }\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/speeds?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"speeds"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "occupancy",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"zone",
								"occupancy"
							],
							"query": [
								{
									"key": "zone_ids",
									"value": "1",
									"description": "(Required) Specify which zones to return speeds for."
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								}
							]
						},
						"description": "Occupancy is the amount of time a zone is occupied by one or many road users. This is similar to [zonal dwell times](http://127.0.0.1:8080/apis/traffic_mon/#/operations/getZoneDwellTimes) but the data is presented slightly differently.\n<!-- theme: info -->  \n> **Info**<br>Dwell times data is returned for all objects that exited the zone within the time range requested.\nThe endpoint returns an array of time bucketed occupancy data. Each time bucket contains the following information for each individual road user class:\n\n - How many seconds a given number of a particular road class were present in the zone for the time period in question.\n - How many seconds a given number of a particular road class were present in the zone for the time period in question **and** were stationary.\n\nAll zonal occupancy data points are returned in **seconds**.  \n\nBelow is an example of how this data is formatted.\n```json\n\"bus\": {\n   \"stopped\": {\n     \"1\": 3,\n     \"2\": 1\n   } \n   \"total\": {\n     \"1\": 12,\n     \"2\": 1\n   }      \n}\n```  \nIn the following example the zone was occupied by one stationary bus for 3 seconds and two stationary buses for one second. Including both moving and stationary buses, the zone was occupied by one bus for 12 seconds and two buses for one second.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"5254\": [\n    {\n      \"from\": \"2024-02-01T01:00:00.000Z\",\n      \"to\": \"2024-02-01T02:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 59,\n            \"2\": 1\n          },\n          \"stopped\": {}\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T02:00:00.000Z\",\n      \"to\": \"2024-02-01T03:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 58,\n            \"2\": 1\n          },\n          \"stopped\": {}\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T03:00:00.000Z\",\n      \"to\": \"2024-02-01T04:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 28\n          },\n          \"stopped\": {}\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T04:00:00.000Z\",\n      \"to\": \"2024-02-01T05:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 30\n          },\n          \"stopped\": {}\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T05:00:00.000Z\",\n      \"to\": \"2024-02-01T06:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 44\n          },\n          \"stopped\": {\n            \"1\": 6\n          }\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T06:00:00.000Z\",\n      \"to\": \"2024-02-01T07:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 61\n          },\n          \"stopped\": {}\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T07:00:00.000Z\",\n      \"to\": \"2024-02-01T08:00:00.000Z\",\n      \"class_occupancies\": {\n        \"car\": {\n          \"total\": {\n            \"1\": 154\n          },\n          \"stopped\": {}\n        }\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/occupancy?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"occupancy"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "turning counts",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"zone",
								"turning_movements"
							],
							"query": [
								{
									"key": "start_zone_ids",
									"value": "1",
									"description": "(Required) Specifies the zones to be included in which the turning movements began."
								},
								{
									"key": "end_zone_ids",
									"value": "2",
									"description": "(Required) Specifies the zones to be included in which the turning movements end."
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "fill_nulls",
									"value": "true",
									"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
								}
							]
						},
						"description": "Multiple zones can be created on a viewpoint to track the movement of objects. Movements between any given pair of zones are termed turning movements. Whether a road user performs a turning movement, is established by assessing what the first and last zone an object occupied, assuming it occupies more than one zone, and the timestamp it first occupied each of those zones.  \n\nOnly a single turning movement can be assigned to an road user and therefore counts are only registered for the movement relating to the start and end zone the object occupied and ignores any zones it occupied when moving between these.  \n\nFor example consider a viewpoint with zones labelled **A**, **B**, **C**, **D**:  \n\n - A car starts in zone **B** moves through the junction and is last seen in zone **D** \n - However, en-route it passes through zone **A**\n - In this case the information relating to the intermediate movements, **B to A** and **A to D**, are ignored as it is part of another turning movement    \n - As a result, only the turning movement **B to D** is registered as this is the primary movement.\n\n<!-- theme: info -->  \n> **Info**<br>All movements, including movements to and from the same zone, are possible.\nThe endpoint returns an array of time bucketed turning movement data. Each value contains the number of movements made between a given pair of zones within that time bucket. Data is disaggregated by class.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"1200\": {\n    \"1202\": [\n      {\n        \"from\": \"2021-09-16T09:00:00.000Z\",\n        \"to\": \"2021-09-16T09:05:00.000Z\",\n        \"turning_movements\": {\n          \"car\": 1,\n          \"truck\": 1\n        }\n      },\n      {\n        \"from\": \"2021-09-16T09:05:00.000Z\",\n        \"to\": \"2021-09-16T09:10:00.000Z\",\n        \"turning_movements\": {\n          \"car\": 3,\n          \"truck\": 1\n        }\n      }\n    ]\n  },\n  \"1201\": {\n    \"1202\": [\n      {\n        \"from\": \"2021-09-16T09:00:00.000Z\",\n        \"to\": \"2021-09-16T09:05:00.000Z\",\n        \"turning_movements\": {\n          \"car\": 2\n        }\n      }\n    ],\n    \"1203\": [\n      {\n        \"from\": \"2021-09-16T09:00:00.000Z\",\n        \"to\": \"2021-09-16T09:05:00.000Z\",\n        \"turning_movements\": {\n          \"car\": 1\n        }\n      }\n    ]\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/turning_movements?start_zone_ids=1&end_zone_ids=2&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"turning_movements"
									],
									"query": [
										{
											"key": "start_zone_ids",
											"value": "1",
											"description": "(Required) Specifies the zones to be included in which the turning movements began."
										},
										{
											"key": "end_zone_ids",
											"value": "2",
											"description": "(Required) Specifies the zones to be included in which the turning movements end."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "dwell times",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"zone",
								"dwell_times"
							],
							"query": [
								{
									"key": "zone_ids",
									"value": "1",
									"description": "(Required) Specify which zones to return speeds for."
								},
								{
									"key": "classes",
									"value": "car",
									"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "fill_nulls",
									"value": "true",
									"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
								}
							]
						},
						"description": "Dwell times is the amount of time a vehicle or pedestrian spent stationary when occupying a zone. This can be compared to the total time a vehicle was in a zone and expressed as a ratio, termed the proportion of dwell time in a zone.\n<!-- theme: info -->  \n> **Info**<br>Dwell times data is returned for all objects that exited the zone within the time range requested.\nThe endpoint returns an array of time bucketed dwell time data. Each time bucket contains the following information for each individual road user class:\n\n - The number of road users that exited the zone within the time bucket. \n - The mean dwell time\n - The mean total time\n - 25th, 50th and 75 percentile values for both\n    - Dwell time\n    - Total time\n - Variance in dwell time \n - Variance in total time \n - Proportional dwell times\n    - Explained below \n\nAll dwell time data points are returned in **seconds**.  \n\nProportional dwell time is the percentage of time a road user spent dwelling within the zone in relation to the total time they spent occupying the zone. Proportional dwell time (`dwell_to_total_time_proportion`) is provided through a histogram. It shows the total number of road users by 10 buckets where each bucket represents a 10% range where the bottom value is inclusive.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"5263\": [\n    {\n      \"from\": \"2024-02-01T08:00:00.000Z\",\n      \"to\": \"2024-02-01T09:00:00.000Z\",\n      \"zone_dwell_times\": {\n        \"pedestrian\": {\n          \"number_of_objects\": 68,\n          \"mean_dwell_time\": 6.2,\n          \"mean_total_time\": 9.1,\n          \"25_percentile_dwell_time\": 1.5,\n          \"50_percentile_dwell_time\": 3.7,\n          \"75_percentile_dwell_time\": 8.8,\n          \"25_percentile_total_time\": 4,\n          \"50_percentile_total_time\": 6.7,\n          \"75_percentile_total_time\": 12,\n          \"variance_dwell_time\": 47.6,\n          \"variance_total_time\": 51.1,\n          \"dwell_to_total_time_proportion\": {\n            \"0\": 3,\n            \"10\": 5,\n            \"20\": 2,\n            \"30\": 8,\n            \"40\": 10,\n            \"50\": 9,\n            \"60\": 7,\n            \"70\": 9,\n            \"80\": 10,\n            \"90\": 5\n          }\n        }\n      }\n    },\n    {\n      \"from\": \"2024-02-01T09:00:00.000Z\",\n      \"to\": \"2024-02-01T10:00:00.000Z\",\n      \"zone_dwell_times\": {\n        \"pedestrian\": {\n          \"number_of_objects\": 34,\n          \"mean_dwell_time\": 4.3,\n          \"mean_total_time\": 6.8,\n          \"25_percentile_dwell_time\": 0.6,\n          \"50_percentile_dwell_time\": 1.8,\n          \"75_percentile_dwell_time\": 6.5,\n          \"25_percentile_total_time\": 2.7,\n          \"50_percentile_total_time\": 5,\n          \"75_percentile_total_time\": 10.2,\n          \"variance_dwell_time\": 26.1,\n          \"variance_total_time\": 33,\n          \"dwell_to_total_time_proportion\": {\n            \"0\": 2,\n            \"10\": 1,\n            \"20\": 6,\n            \"30\": 4,\n            \"40\": 2,\n            \"50\": 5,\n            \"60\": 6,\n            \"70\": 5,\n            \"80\": 3,\n            \"90\": 0\n          }\n        }\n      }\n    }\n  ]\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/dwell_times?zone_ids=1&classes=car&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&fill_nulls=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"dwell_times"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										},
										{
											"key": "classes",
											"value": "car",
											"description": "Specify which classes to return data for.  \n\n> Class data is always presented as our raw detection classes.  \nClass inputs are case sensitive and if the class is comprised of two words they must be seperated with an underscore (_). For example these are VALID classes:\n `emergency_car` and `emergency_van`. These are INVALID classes: `emergency van`, `Emergency_Van` or `emergency-van`.  "
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "fill_nulls",
											"value": "true",
											"description": "If true, the response data contains data for all raw detection classes and all \ntime buckets even where there is no data to be shown. Default is false, in which case only non-zero values are in the response.\nThis can be specified as either `fill_nulls=true` or `fill_nulls`."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "metadata",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"zone",
								"metadata"
							],
							"query": [
								{
									"key": "zone_ids",
									"value": "1",
									"description": "(Required) Specify which zones to return speeds for."
								}
							]
						},
						"description": "Get information for the specified zones. If `zone_ids` are not specified it will return all zones that users has permission to view."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"1001\": {\n    \"name\": \"King St LHS Ped Area\",\n    \"description\": \"Ped waiting area at junction of King St / High St\",\n    \"is_occupancy\": true,\n    \"is_speed\": false,\n    \"is_turning\": false,\n    \"geometry\": {\n      \"image\": [\n        [\n          1997,\n          10558\n        ],\n        [\n          4471,\n          6493\n        ],\n        [\n          2816,\n          6326\n        ],\n        [\n          1783,\n          7221\n        ],\n        [\n          265,\n          9420\n        ],\n        [\n          1456,\n          10709\n        ]\n      ],\n      \"geo_json\": null\n    },\n    \"is_dwell_times_zone\": true,\n    \"is_dwell_times_zone_for_filter\": false,\n    \"alert_rules\": {\n      \"1\": {\n        \"alert_type\": \"ZONAL_OCCUPANCY_HIGH\",\n        \"description\": \"zonal_occupancy_high_422\",\n        \"eval_interval_ms\": 1000,\n        \"for_ms\": 10000,\n        \"name\": \"zonal_occupancy_high_422\",\n        \"threshold\": 5,\n        \"window_duration_ms\": 5000\n      }\n    }\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/zone/metadata?zone_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"zone",
										"metadata"
									],
									"query": [
										{
											"key": "zone_ids",
											"value": "1",
											"description": "(Required) Specify which zones to return speeds for."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "All zone based feature data."
		},
		{
			"name": "viewpoint",
			"item": [
				{
					"name": "data availability",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"viewpoint",
								"data_availability"
							],
							"query": [
								{
									"key": "viewpoint_ids",
									"value": "1",
									"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
								},
								{
									"key": "from",
									"value": "2020-03-08T16:35:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "to",
									"value": "2020-03-08T16:45:00.000Z",
									"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
								},
								{
									"key": "time_bucket",
									"value": "24h",
									"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
								},
								{
									"key": "include_live_ranges",
									"value": "true",
									"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
								}
							]
						},
						"description": "Data availability is a metric which determines what percentage of data is available and retrievable for a given time period and viewpoint using heartbeat data. For more about how this data is collected and for which viewpoints it is available for please consult the relevant pages of the [knowledge base](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2600075427/Data+availability).\n<!-- theme: info -->  \n> **Info**<br>Data availability data is available **up to 15th November 2022**. Data prior to this point will be returned as null values as the metrics is unknown.\nValues can be provided for one or multiple viewpoints. Results are aggregated into buckets of specified duration. The options for these duration parameter align with those available in other endpoints to allow ease of comparison.  \n\nThe user can also request live periods to be returned using the `include_live_ranges` flag. If enabled, an array of start and end times indicating when the sensor was operational across the entire query period are returned alongside the bucketed data availability data.  \n<!-- theme: info -->  \n> **Info**<br>Data availability data is only available for viewpoints that are associated with **2nd generation VivaCity sensors**.\nIf the endpoint is queried for a viewpoint that is not compatible the endpoint will return null values as no heartbeat data available.  \n\nFinally, data availability data is correct at the time of retrieval. It is possible that the data availability metric could change due to late arriving data sent by a backup mechanism which stores data on the hardware in case of an outage. However, note that in these cases **a maximum of 24 hours of data** can be restored and infilled.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"viewpoints\": {\n    \"69\": {\n      \"buckets\": [\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T01:00:00.000Z\",\n          \"to\": \"2024-02-01T02:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T02:00:00.000Z\",\n          \"to\": \"2024-02-01T03:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T03:00:00.000Z\",\n          \"to\": \"2024-02-01T04:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T04:00:00.000Z\",\n          \"to\": \"2024-02-01T05:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T05:00:00.000Z\",\n          \"to\": \"2024-02-01T06:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T06:00:00.000Z\",\n          \"to\": \"2024-02-01T07:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T07:00:00.000Z\",\n          \"to\": \"2024-02-01T08:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T08:00:00.000Z\",\n          \"to\": \"2024-02-01T09:00:00.000Z\"\n        },\n        {\n          \"data_availability_percent\": 100,\n          \"from\": \"2024-02-01T09:00:00.000Z\",\n          \"to\": \"2024-02-01T10:00:00.000Z\"\n        }\n      ],\n      \"live_ranges\": [\n        {\n          \"from\": \"2024-02-01T01:00:00.000Z\",\n          \"to\": \"2024-02-01T10:00:00.000Z\"\n        }\n      ]\n    }\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/data_availability?viewpoint_ids=1&from=2020-03-08T16:35:00.000Z&to=2020-03-08T16:45:00.000Z&time_bucket=24h&include_live_ranges=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"data_availability"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										},
										{
											"key": "from",
											"value": "2020-03-08T16:35:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\ncountline speeds are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `from` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "to",
											"value": "2020-03-08T16:45:00.000Z",
											"description": "(Required) Timestamp which specifies the start time for the period in which\njourney times are requested.\n\nWe currently accept the following formats:\n- ISO UTC Date:                    2020-03-08\n- ISO UTC Time Date (Hour):        2020-03-08T16Z\n- ISO UTC Time Date (Minute):      2020-03-08T16:35Z\n- ISO UTC Time Date (Second):      2020-03-08T16:35:00Z\n- ISO UTC Time Date (Millisecond): 2020-03-08T16:35:00.000Z\n- Unix Timestamp:                  1583685300\n- Unix Nano Timestamp:             1583685300000000000\n\nNote that the `to` parameter must align with the `time_bucket` duration, see the `time_bucket` parameter description for further explanation and examples."
										},
										{
											"key": "time_bucket",
											"value": "24h",
											"description": "(Required) The results per countline will be returned in equal sized time buckets.\nThe accepted time buckets are as followed:\n\n_Note: smaller time buckets limit the maximum time range that can be queried as shown below_\n| `time_bucket` | Maximum query time range                  |\n| ------------: | :------------------------- |\n|          `5m` | 24 hours |\n|         `10m` | 24 hours       |\n|         `15m` | 24 hours       |\n|         `30m` | 24 hours       |\n|         `1h` | 7 days     |\n|         `4h` | 7 days     |\n|         `12h` |  31 days    |\n|         `24h` |  92 days    |\n\n_Note: all max query ranges are actually one hour greater than the values shown above. This is to account for querys spanning across daylight savings time changes._\n\nThe `time_bucket` parameter can be passed in the format `xs`, `xm` or `xh`, where x is an integer value (N.B. `3600s`, `60m` and `1h` all equate to an hour).\n\nThe miniumum `time_bucket` value is dictated by the size of the time period queried. Moreover, the from and to timestamps must be defined such that the length of the period is exactly divisible by the value chosen as the `time_bucket`.\n\nFor example:\n\n|                      Allowed                       | `time_bucket` | `from` or `to`                  |\n| :------------------------------------------------: | ------------: | :------------------------- |\n|  YES  |          `5m` | `2021-07-01T00:25Z`        |\n|  YES  |         `10m` | `2021-07-01T06:40Z`        |\n|  YES  |         `30m` | `2021-07-01T10:00Z`        |\n|  YES  |          `1h` | `2021-07-01T12:00:00Z`     |\n|  YES  |         `24h` | `2021-07-01T00:00:00.000Z` |\n| NO |          `5m` | `2021-07-01T00:21Z`        |\n| NO |         `30m` | `2021-07-01T10:20Z`        |\n| NO |         `24h` | `2021-07-01T10:00Z`        |"
										},
										{
											"key": "include_live_ranges",
											"value": "true",
											"description": "Setting this to true will return both the bucketed data availability data and an array of live ranges for the time period queried.\n\nThis defaults to false if not specified."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "metadata",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"viewpoint",
								"metadata"
							],
							"query": [
								{
									"key": "viewpoint_ids",
									"value": "1",
									"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
								}
							]
						},
						"description": "Get information for the specified viewpoints. If `viewpoint_ids` are not specified it will return all viewpoints that a user has permission to view."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"1\": {\n    \"zones\": {\n      \"1\": {\n        \"alert_rules\": {\n          \"23\": {\n            \"alert_type\": \"ZONAL_OCCUPANCY_HIGH\",\n            \"description\": \"zonal_occupancy_high_422\",\n            \"eval_interval_ms\": 1000,\n            \"for_ms\": 10000,\n            \"name\": \"zonal_occupancy_high_422\",\n            \"threshold\": 5,\n            \"window_duration_ms\": 5000\n          }\n        },\n        \"description\": \"description\",\n        \"geometry\": {\n          \"geo_json\": null,\n          \"image\": [\n            [\n              0,\n              0\n            ],\n            [\n              1,\n              1\n            ],\n            [\n              2,\n              2\n            ]\n          ]\n        },\n        \"is_occupancy\": false,\n        \"is_speed\": true,\n        \"is_turning\": true,\n        \"is_dwell_times_zone\": false,\n        \"is_dwell_times_zone_for_filter\": true,\n        \"name\": \"name\"\n      }\n    },\n    \"countlines\": {\n      \"1\": {\n        \"alert_rules\": {},\n        \"name\": \"name\",\n        \"description\": \"description\",\n        \"direction\": \"CLOCKWISE_AND_ANTICLOCKWISE\",\n        \"is_dwell_times_filtering_countline\": true,\n        \"geometry\": {\n          \"image\": [\n            [\n              0,\n              0\n            ],\n            [\n              0,\n              0\n            ]\n          ],\n          \"geo_json\": {\n            \"coordinates\": [\n              [\n                0,\n                0\n              ],\n              [\n                1,\n                1\n              ]\n            ],\n            \"type\": \"LineString\"\n          }\n        }\n      }\n    }\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/viewpoint/metadata?viewpoint_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"viewpoint",
										"metadata"
									],
									"query": [
										{
											"key": "viewpoint_ids",
											"value": "1",
											"description": "IDs of the viewpoint to retrieve. The values can be comma separated or parsed in multiple parameters (`viewpoint_ids=1,2,3` or `viewpoint_ids=1&viewpoint_ids=2&viewpoint_ids=3`)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "All viewpoint based feature data."
		},
		{
			"name": "hardware",
			"item": [
				{
					"name": "metadata",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-vivacity-api-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hardware",
								"metadata"
							],
							"query": [
								{
									"key": "hardware_ids",
									"value": "1",
									"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
								}
							]
						},
						"description": "Get information for the specified hardware. If `hardware_ids` are not specified it will return all hardware that that a user has permission to view."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"10\": {\n    \"lat\": 53.483501,\n    \"long\": -2.254698,\n    \"view_points\": {\n      \"133\": {\n        \"countlines\": {\n          \"14129\": {\n            \"name\": \"S66_810_East_In_SJ001\",\n            \"description\": \"\",\n            \"direction\": \"CLOCKWISE_ONLY\",\n            \"geometry\": {\n              \"image\": [\n                [\n                  5393,\n                  7342\n                ],\n                [\n                  9215,\n                  9951\n                ]\n              ],\n              \"geo_json\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                  [\n                    -2.254585,\n                    53.483589\n                  ],\n                  [\n                    -2.254555,\n                    53.48354\n                  ]\n                ]\n              }\n            },\n            \"is_dwell_times_filtering_countline\": false,\n            \"alert_rules\": {}\n          },\n          \"14130\": {\n            \"name\": \"S66_810_East_Out_SJ001\",\n            \"description\": \"\",\n            \"direction\": \"ANTICLOCKWISE_ONLY\",\n            \"geometry\": {\n              \"image\": [\n                [\n                  2577,\n                  6720\n                ],\n                [\n                  4582,\n                  8116\n                ]\n              ],\n              \"geo_json\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                  [\n                    -2.254586,\n                    53.48365\n                  ],\n                  [\n                    -2.254552,\n                    53.483597\n                  ]\n                ]\n              }\n            },\n            \"is_dwell_times_filtering_countline\": false,\n            \"alert_rules\": {}\n          },\n          \"40528\": {\n            \"name\": \"Countline 1\",\n            \"description\": \"\",\n            \"direction\": \"CLOCKWISE_AND_ANTICLOCKWISE\",\n            \"geometry\": {\n              \"image\": [\n                [\n                  7296,\n                  2564\n                ],\n                [\n                  8823,\n                  3216\n                ]\n              ],\n              \"geo_json\": null\n            },\n            \"is_dwell_times_filtering_countline\": false,\n            \"alert_rules\": {}\n          },\n          \"40529\": {\n            \"name\": \"Countline 2\",\n            \"description\": \"\",\n            \"direction\": \"CLOCKWISE_AND_ANTICLOCKWISE\",\n            \"geometry\": {\n              \"image\": [\n                [\n                  8849,\n                  2943\n                ],\n                [\n                  9881,\n                  3565\n                ]\n              ],\n              \"geo_json\": null\n            },\n            \"is_dwell_times_filtering_countline\": false,\n            \"alert_rules\": {}\n          }\n        },\n        \"zones\": {\n          \"276\": {\n            \"name\": \"\",\n            \"description\": \"\",\n            \"is_occupancy\": true,\n            \"is_speed\": false,\n            \"is_turning\": false,\n            \"geometry\": {\n              \"image\": [\n                [\n                  1024,\n                  14972\n                ],\n                [\n                  2986,\n                  10315\n                ],\n                [\n                  6434,\n                  11438\n                ],\n                [\n                  8081,\n                  5855\n                ],\n                [\n                  9062,\n                  2685\n                ],\n                [\n                  9907,\n                  2397\n                ],\n                [\n                  9890,\n                  3974\n                ],\n                [\n                  9369,\n                  12545\n                ],\n                [\n                  9062,\n                  16337\n                ],\n                [\n                  1775,\n                  16337\n                ],\n                [\n                  913,\n                  15367\n                ]\n              ],\n              \"geo_json\": null\n            },\n            \"is_dwell_times_zone\": false,\n            \"is_dwell_times_zone_for_filter\": false,\n            \"alert_rules\": {}\n          },\n          \"277\": {\n            \"name\": \"\",\n            \"description\": \"\",\n            \"is_occupancy\": true,\n            \"is_speed\": false,\n            \"is_turning\": false,\n            \"geometry\": {\n              \"image\": [\n                [\n                  2901,\n                  10315\n                ],\n                [\n                  6502,\n                  11544\n                ],\n                [\n                  8089,\n                  5810\n                ],\n                [\n                  9403,\n                  1365\n                ],\n                [\n                  9668,\n                  576\n                ],\n                [\n                  9275,\n                  455\n                ],\n                [\n                  8226,\n                  1820\n                ],\n                [\n                  7406,\n                  3034\n                ],\n                [\n                  5555,\n                  5446\n                ]\n              ],\n              \"geo_json\": null\n            },\n            \"is_dwell_times_zone\": false,\n            \"is_dwell_times_zone_for_filter\": false,\n            \"alert_rules\": {}\n          }\n        }\n      },\n      \"134\": {\n        \"countlines\": {\n          \"42585\": {\n            \"name\": \"Countline 1\",\n            \"description\": \"\",\n            \"direction\": \"CLOCKWISE_AND_ANTICLOCKWISE\",\n            \"geometry\": {\n              \"image\": [\n                [\n                  1000,\n                  1500\n                ],\n                [\n                  14932,\n                  1820\n                ],\n                [\n                  683,\n                  3625\n                ],\n                [\n                  15419,\n                  5689\n                ],\n                [\n                  563,\n                  7039\n                ],\n                [\n                  15709,\n                  8889\n                ],\n                [\n                  589,\n                  11028\n                ],\n                [\n                  15402,\n                  14183\n                ]\n              ],\n              \"geo_json\": null\n            },\n            \"is_dwell_times_filtering_countline\": false,\n            \"alert_rules\": {}\n          }\n        },\n        \"zones\": {}\n      }\n    }\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hardware/metadata?hardware_ids=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hardware",
										"metadata"
									],
									"query": [
										{
											"key": "hardware_ids",
											"value": "1",
											"description": "IDs of the hardware to retrieve. The values can be comma separated or parsed in multiple parameters (`hardware_ids=1,2,3` or `hardware_ids=1&hardware_ids=2&hardware_ids=3`)"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "All hardware based feature data."
		},
		{
			"name": "authorisation",
			"item": [
				{
					"name": "get token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const access_token = pm.response.json().access_token;",
									"const refresh_token = pm.response.json().refresh_token",
									"pm.environment.set(\"bearerToken\", access_token);",
									"pm.environment.set(\"refresh_token\", refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/get-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get-token"
							]
						},
						"description": "<!-- theme: info -->  \n\n> **New Authetication Methods Available**<br>As of **31st March 2024** no new API credentials will be created for API authorisation. New users must instead set up API keys using the steps outlined [here](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2759557127/Supported+API+authentication+methods).  \n\n\nThis endpoint allows users to obtain an authentication token by providing valid user credentials. The token obtained can be used to authenticate subsequent requests to protected resources within the API.  \n\n  \nUsers should send a POST request to this endpoint with the user's credentials encoded in the request body. The credentials should be provided in urlencoded format.  \n\n\nTokens have an expiration time, after which it becomes invalid and needs to be refreshed.\n"
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "minim"
										},
										{
											"key": "password",
											"value": "ut in sit ali"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/get-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get-token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const access_token = pm.response.json().access_token;",
									"const refresh_token = pm.response.json().refresh_token",
									"pm.environment.set(\"bearerToken\", access_token);",
									"pm.environment.set(\"refresh_token\", refresh_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"refresh-token"
							]
						},
						"description": "<!-- theme: info -->  \n\n> **New Authetication Methods Available**<br>As of **31st March 2024** no new API credentials will be created for API authorisation. New users must instead set up API keys using the steps outlined [here](https://vivacitylabs.atlassian.net/wiki/spaces/PKB/pages/2759557127/Supported+API+authentication+methods).  \n\n\n  This endpoint allows users to refresh an authentication token using a valid refresh token. Authentication tokens have a limited lifespan for security reasons. When a token expires, users can use a refresh token to obtain a new authentication token without requiring the user to reauthenticate.  \n\n\n  To refresh a token, users should send a POST request to this endpoint with the refresh token provided in the request body. The refresh token is created alongside the authentication token during the initial authentication process.  \n\n\n  Upon successful refresh, the server responds with a new authentication token that can be used for subsequent requests. Refresh tokens themselves also have expiration times.  \n\n\n  It's important to securely transmit refresh tokens and handle them with care to prevent unauthorized access to user accounts and sensitive information.\n"
					},
					"response": [
						{
							"name": "Successful response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "x-vivacity-api-key",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "eiusmod"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"refresh-token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Request and refresh API tokens"
		},
		{
			"name": "legacy",
			"item": [
				{
					"name": "counts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"counts"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "class",
									"value": "car",
									"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
								},
								{
									"key": "countline",
									"value": "1",
									"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
								},
								{
									"key": "timeFrom",
									"value": "2019-04-25T12:44:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeTo",
									"value": "2019-04-25T12:50:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "includeZeroCounts",
									"value": "true",
									"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
								}
							]
						},
						"description": "<!-- theme: warning -->  \n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline counts data please use the **countline/counts** endpoint.   \n\nThe user can specify which countlines to get counts for. These can be filtered by time and class.  \n\nBy default this endpoint will return classified counts from the last 5 minutes, across all the countlines from the sensors the user has access to.  \n\nCounts will be grouped into 5 minute buckets within the specified time range. If the start or end time of a specified time range do not fall on 5 minute interval times, the buckets beginning within the interval will be returned instead.  \n\nWe currently offer 13 classifications: `cyclist`, `motorbike`, `car`, `pedestrian`, `taxi`, `van`, `minibus`, `bus`, `rigid`, `truck`, `emergency_car`, `emergency_van`, `fire_engine`. Note that querying for `emergency_car`, `emergency_van` or `fire_engine` requires using an underscore and will not work with a space or dash.  \n\nIf you’re seeing more than the 13 classses listed above, we’ve recently released a 32 classification beta.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"225\": {\n    \"2019-03-08T16:35:00.000Z\": {\n      \"from\": \"2019-03-08T16:35:00.000Z\",\n      \"to\": \"2019-03-08T16:40:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 9,\n          \"countOut\": 23\n        },\n        {\n          \"class\": \"van\",\n          \"countIn\": 3,\n          \"countOut\": 8\n        }\n      ]\n    },\n    \"2019-03-08T16:40:00.000Z\": {\n      \"from\": \"2019-03-08T16:40:00.000Z\",\n      \"to\": \"2019-03-08T16:45:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 4,\n          \"countOut\": 33\n        },\n        {\n          \"class\": \"van\",\n          \"countIn\": 8,\n          \"countOut\": 3\n        },\n        {\n          \"class\": \"truck\",\n          \"countIn\": 0,\n          \"countOut\": 1\n        }\n      ]\n    },\n    \"2019-03-08T16:45:00.000Z\": {\n      \"from\": \"2019-03-08T16:45:00.000Z\",\n      \"to\": \"2019-03-08T16:50:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 3,\n          \"countOut\": 13\n        },\n        {\n          \"class\": \"van\",\n          \"countIn\": 2,\n          \"countOut\": 8\n        }\n      ]\n    }\n  },\n  \"1732\": {\n    \"2019-03-08T16:35:00.000Z\": {\n      \"from\": \"2019-03-08T16:35:00.000Z\",\n      \"to\": \"2019-03-08T16:40:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 9,\n          \"countOut\": 22\n        },\n        {\n          \"class\": \"cyclist\",\n          \"countIn\": 6,\n          \"countOut\": 12\n        },\n        {\n          \"class\": \"pedestrian\",\n          \"countIn\": 1,\n          \"countOut\": 3\n        }\n      ]\n    },\n    \"2019-03-08T16:40:00.000Z\": {\n      \"from\": \"2019-03-08T16:40:00.000Z\",\n      \"to\": \"2019-03-08T16:45:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 43,\n          \"countOut\": 21\n        },\n        {\n          \"class\": \"cyclist\",\n          \"countIn\": 32,\n          \"countOut\": 55\n        }\n      ]\n    },\n    \"2019-03-08T16:45:00.000Z\": {\n      \"from\": \"2019-03-08T16:45:00.000Z\",\n      \"to\": \"2019-03-08T16:50:00.000Z\",\n      \"counts\": [\n        {\n          \"class\": \"car\",\n          \"countIn\": 22,\n          \"countOut\": 10\n        },\n        {\n          \"class\": \"cyclist\",\n          \"countIn\": 15,\n          \"countOut\": 28\n        }\n      ]\n    }\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/counts?api-version=2&class=car&countline=1&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&includeZeroCounts=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"counts"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "class",
											"value": "car",
											"description": "(Required) Specify which classes to return counts for. Note class inputs are case sensitive."
										},
										{
											"key": "countline",
											"value": "1",
											"description": "Specify which countlines to return counts for. If left blank, it will display all countlines that had crossings during your specified period."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "includeZeroCounts",
											"value": "true",
											"description": "If set to true, the response will include counts of 0 for the requested classes. If no classes are explicitly queried, this will include all available classes for the queried sensors.\n\nWe currently offer 13 classifications: cyclist, motorbike, car, pedestrian, taxi, van, minibus, bus, rigid, truck, emergency_car, emergency_van, fire_engine. Note that querying for emergency_car, fire_engine or emergency_van requires using an underscore and will not work with a space or dash."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "departing journey times",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"journey_times",
								"departing"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "originSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
								},
								{
									"key": "destinationSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
								},
								{
									"key": "timeFrom",
									"value": "2019-04-25T12:44:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeTo",
									"value": "2019-04-25T12:50:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								}
							]
						},
						"description": "<!-- theme: warning -->  \n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline journey times please use the **countline/journey_times** endpoint.   \nGet the median journey time between two sensors for vehicles departing from the origin sensor within the specified time range, or a default time range (the last 15 minutes).  \n\nThe median will be derived from all recorded journeys that started within the time range, and ended less than 3 hours after `timeTo`.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"medianJourneyTimeInSeconds\": 60,\n  \"numberOfJourneys\": 12\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "arriving journey times",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"journey_times",
								"arriving"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "originSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
								},
								{
									"key": "destinationSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
								},
								{
									"key": "timeFrom",
									"value": "2019-04-25T12:44:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeTo",
									"value": "2019-04-25T12:50:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								}
							]
						},
						"description": "<!-- theme: warning -->  \n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline journey times please use the **countline/journey_times** endpoint.   \nGet the median journey time between two sensors for vehicles arriving from the origin sensor within the specified time range, or a default time range (the last 15 minutes).  \n\nThe median will be derived from all recorded journeys that started within the time range, and ended less than 3 hours after `timeTo`.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"medianJourneyTimeInSeconds\": 60,\n  \"numberOfJourneys\": 12\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "departing bucketed journey times",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"journey_times",
								"departing",
								"bucketed"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "originSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
								},
								{
									"key": "destinationSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
								},
								{
									"key": "timeFrom",
									"value": "2019-04-25T12:44:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeTo",
									"value": "2019-04-25T12:50:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeBucketSize",
									"value": "5",
									"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
								}
							]
						},
						"description": "<!-- theme: warning -->  \n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline journey times please use the **countline/journey_times** endpoint.   \nGet journey time medians bucketed into time windows specified by `timeBucketSize`.  \n\nThe medians will be derived from journeys that depart from the origin sensor in the bucket time range, and end less than 3 hours after `timeTo`.  \n\nBy default, the time range will default to the last 15 minutes, with a default `timeBucketSize` of 5 minutes.  \n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"2019-04-25T12:44:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"60,\",\n    \"numberOfJourneys\": 2\n  },\n  \"2019-04-25T12:46:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"null,\",\n    \"numberOfJourneys\": 0\n  },\n  \"2019-04-25T12:48:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"430,\",\n    \"numberOfJourneys\": 8\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/departing/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"departing",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "arriving bucketed journey times",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"journey_times",
								"arriving",
								"bucketed"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "originSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
								},
								{
									"key": "destinationSensor",
									"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
									"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
								},
								{
									"key": "timeFrom",
									"value": "2019-04-25T12:44:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeTo",
									"value": "2019-04-25T12:50:00.000Z",
									"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
								},
								{
									"key": "timeBucketSize",
									"value": "5",
									"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
								}
							]
						},
						"description": "<!-- theme: warning -->  \n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline journey times please use the **countline/journey_times** endpoint.   \nGet journey time medians bucketed into time windows specified by `timeBucketSize`.  \n\nThe medians will be derived from journeys that arrive from the origin sensor in the bucket time range, and end less than 3 hours after `timeTo`.  \n\nBy default, the time range will default to the last 15 minutes, with a default `timeBucketSize` of 5 minutes.  \n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"2019-04-25T12:44:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"60,\",\n    \"numberOfJourneys\": 2\n  },\n  \"2019-04-25T12:46:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"null,\",\n    \"numberOfJourneys\": 0\n  },\n  \"2019-04-25T12:48:00.000Z\": {\n    \"medianJourneyTimeInSeconds\": \"430,\",\n    \"numberOfJourneys\": 8\n  }\n}"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/journey_times/arriving/bucketed?api-version=2&originSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&destinationSensor=8e31aaf0-49ac-11e9-8646-d663bd873d93&timeFrom=2019-04-25T12:44:00.000Z&timeTo=2019-04-25T12:50:00.000Z&timeBucketSize=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"journey_times",
										"arriving",
										"bucketed"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "originSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the origin point for the median journey time."
										},
										{
											"key": "destinationSensor",
											"value": "8e31aaf0-49ac-11e9-8646-d663bd873d93",
											"description": "(Required) Specify the sensor to be used as the destination point for the median journey time."
										},
										{
											"key": "timeFrom",
											"value": "2019-04-25T12:44:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the start of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours.  The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeTo",
											"value": "2019-04-25T12:50:00.000Z",
											"description": "(Required) ISO 8601 datetime specifying the end of the time window. The maximum time range allowed between \"timeFrom\" and \"timeTo\" is 24 hours. The server will return an error if only one of \"timeFrom\" or \"timeTo\" is included in the request without the other.\n"
										},
										{
											"key": "timeBucketSize",
											"value": "5",
											"description": "An integer value representing the span of minutes for which median journey times should be computed.  \nFor example with a time range n, and a \"timeBucketSize\" t, the data returned will be split into (n / t) buckets, with each time bucket median using journeys starting within the time range of that bucket.  \nIf a \"timeBucketSize\" parameter is not provided, it will default to 5 minutes.  \n"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "countline information",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"countline"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "countlineId",
									"value": "1",
									"description": "IDs of the countlines to retrieve. The values must be comma separated."
								}
							]
						},
						"description": "<!-- theme: warning -->  \n\n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request countline metadata please use the **countline/metadata** endpoint.   \n\n\nGet information for the specified countlines. If countline IDs are not specified, it will return all countlines by default. The countline centre lat/long will always be returned. If the start and end points are available, they will also be included.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"225\",\n    \"name\": \"S33_M1_TestSite\",\n    \"location\": {\n      \"start\": {\n        \"lat\": 61.989113,\n        \"long\": -49.672229\n      },\n      \"end\": {\n        \"lat\": 61.989832,\n        \"long\": -49.672382\n      },\n      \"centre\": {\n        \"lat\": 61.9895,\n        \"long\": -49.6723\n      }\n    },\n    \"direction\": \"out\"\n  },\n  {\n    \"id\": \"382\",\n    \"name\": \"S34_M1_TestSite\",\n    \"location\": {\n      \"start\": {\n        \"lat\": 61.13202,\n        \"long\": -49.40293\n      },\n      \"end\": {\n        \"lat\": 61.1832,\n        \"long\": -49.4039\n      },\n      \"centre\": {\n        \"lat\": 61.15,\n        \"long\": -49.4033\n      }\n    },\n    \"direction\": \"in\"\n  },\n  {\n    \"id\": \"1732\",\n    \"name\": \"S35_M1_TestSite\",\n    \"location\": {\n      \"start\": {\n        \"lat\": 61.988283,\n        \"long\": -49.669229\n      },\n      \"end\": {\n        \"lat\": 61.98832,\n        \"long\": -49.663829\n      },\n      \"centre\": {\n        \"lat\": 61.9883,\n        \"long\": -49.665\n      }\n    },\n    \"direction\": \"both\"\n  }\n]"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/countline?api-version=2&countlineId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"countline"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "countlineId",
											"value": "1",
											"description": "IDs of the countlines to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "sensor information",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sensor"
							],
							"query": [
								{
									"key": "api-version",
									"value": "2",
									"description": "(Required) Specify which major version of the API to make a request to."
								},
								{
									"key": "sensorid",
									"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"description": "IDs of the sensors to retrieve. The values must be comma separated."
								}
							]
						},
						"description": "<!-- theme: warning -->  \n\n> **Endpoint Deprecated**<br>This endpoint has now been deprecated. To request hardware metadata please use the **hardware/metadata** endpoint.   \n\nGet information for the specified sensors. If sensor IDs are not specified will return all sensors by default.\n"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"d3630f5c-4fc3-11e9-b1f4-42010af00366\",\n    \"location\": {\n      \"lat\": 61.988283,\n      \"long\": -49.67283\n    },\n    \"countlines\": [\n      \"225\",\n      \"1732\"\n    ],\n    \"availableClasses\": [\n      \"fire_engine\",\n      \"pedestrian\",\n      \"cyclist\",\n      \"motorbike\",\n      \"car\",\n      \"taxi\",\n      \"van\",\n      \"minibus\",\n      \"bus\",\n      \"rigid\",\n      \"truck\",\n      \"emergency_car\",\n      \"emergency_van\"\n    ]\n  },\n  {\n    \"id\": \"23a1aab8-49ac-11d8-8342-8663bdf73d9c\",\n    \"location\": {\n      \"lat\": 61.988283,\n      \"long\": -49.669229\n    },\n    \"countlines\": [\n      \"382\"\n    ],\n    \"availableClasses\": [\n      \"fire engine\",\n      \"pedestrian\",\n      \"cyclist\",\n      \"car\",\n      \"taxi\"\n    ]\n  }\n]"
						},
						{
							"name": "No content",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthenticated",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unauthorized",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "API rate limit exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sensor?api-version=2&sensorid=d3630f5c-4fc3-11e9-b1f4-42010af00366",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sensor"
									],
									"query": [
										{
											"key": "api-version",
											"value": "2",
											"description": "(Required) Specify which major version of the API to make a request to."
										},
										{
											"key": "sensorid",
											"value": "d3630f5c-4fc3-11e9-b1f4-42010af00366",
											"description": "IDs of the sensors to retrieve. The values must be comma separated."
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Deprecated endpoints associated with previous API versions"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-vivacity-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.vivacitylabs.com"
		}
	]
}